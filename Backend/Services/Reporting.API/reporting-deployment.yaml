apiVersion: apps/v1
kind: Deployment
metadata:
  name: reporting-service
  labels:
    app: reporting-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reporting-service
  template:
    metadata:
      labels:
        app: reporting-service
    spec:
      tolerations:
        - key: "CriticalAddonsOnly"
          operator: "Exists"
          effect: "NoSchedule"
      containers:
        - name: reporting-api
          image: dugi888/reporting-service:latest  # Your Docker image repository
          ports:
            - containerPort: 8087  # Port where the service will run
          livenessProbe:
            httpGet:
              path: /api/v1/transaction/health
              port: 8086
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /api/v1/transaction/readiness
              port: 8086
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
            successThreshold: 1
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Production"  # Set the environment to production
            - name: ASPNETCORE_URLS
              value: "http://+:8087"  # Expose the service on port 8086
          volumeMounts:
            - name: app-settings
              mountPath: appsettings.Production.json
              subPath: appsettings.Production.json
      volumes:
        - name: app-settings
          configMap:
            name: reporting-service-config  # The ConfigMap holding the config files

---
apiVersion: v1
kind: Service
metadata:
  name: reporting-service
spec:
  selector:
    app: reporting-service
  ports:
    - protocol: TCP
      port: 8087
      targetPort: 8087  # Port the container is listening on
  type: ClusterIP  # Exposes the service inside the cluster
